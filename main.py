"""
                      ______   ______          ______    ____  ________  __           ____    ____   ______
                     /_  __/  / ____/         / ____/   /  _/ /_  __/\ \/ /          / __ )  / __ \ /_  __/
                      / /    / / __          / /        / /    / /    \  /          / __  | / / / /  / /
                     / /    / /_/ /         / /___    _/ /    / /     / /          / /_/ / / /_/ /  / /
                    /_/     \____/          \____/   /___/   /_/     /_/          /_____/  \____/  /_/
"""
import os
import logging
import json
import random
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, filters
from aiogram.utils import executor

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

bot_token = os.getenv("BOT_TOKEN")
dp = Dispatcher(Bot(token=bot_token))


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫"""
    buttons = ['–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã \U0001F4D6', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É üîö', '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É \U0001F3AE']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(*buttons)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞ ‚úåüèª\n–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Å–∫–æ—Ä–µ–µ –Ω–∞—á–∏–Ω–∞–π —Å–æ –º–Ω–æ–π –∏–≥—Ä–∞—Ç—å ü§ñ',
                         reply_markup=keyboard)


@dp.message_handler(filters.Text(equals='–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã \U0001F4D6'))
async def rules_btn(message: types.Message):
    """–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    a = '–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ª—é–±–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ üèô'
    b = '–ö–∞–∂–¥—ã–π –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –±—É–∫–≤—É, ' \
        '–∫–æ—Ç–æ—Ä–æ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞–∫–æ–≤-–í–∞—Ä—à–∞–≤–∞-–ê—Ñ–∏–Ω—ã)'
    c = '–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤.'
    d = '–ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ <i>"–¨", "–™", "–´", "–ô"</i>, —Ç–æ –±–µ—Ä–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–∞—è –±—É–∫–≤–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: ' \
        '–ì—Ä–æ–∑–Ω—ã–π-–ù–æ–≥–∏–Ω—Å–∫, –ö–µ—Ä—á—å-–ß–µ—Ä–Ω–æ–±—ã–ª—å). ' \
        '<b>–ì–æ—Ä–æ–¥ –ô–æ—à–∫–∞—Ä-–û–ª–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–≥—Ä–µ</b>'
    e = '–í –∏–≥—Ä–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç '
    g = '–•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã üçÄ'
    await message.answer(f'‚ùï{a}\n‚ùï{b}\n‚ùï{d}\n‚ùï{c}\n‚ùï{e}üá∑üá∫\n‚ùï{g}',
                         parse_mode=types.ParseMode.HTML)


@dp.message_handler(filters.Text(equals='–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É üîö'))
async def end_game(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    global global_list
    chat_id = message.chat.id
    new_global_list = []
    if len(global_list) != 0:
        for i in global_list:
            if i[0] != chat_id:
                new_global_list.append(i)
        global_list = new_global_list
        await message.answer('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É üòâ')
    else:
        await message.answer('–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üòá')


def get_private_list_by_id(chat_id: int) -> list:
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞, —á—å–∏ chat id –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ. –í—Å–µ —ç—Ç–æ
    # –¥–µ–ª–∞–µ—Ç—Å—è —Ä–∞–¥–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –º–Ω–æ–≥–æ –ª—é–¥–µ–π —Å–º–æ–≥–ª–∏ –∏–≥—Ä–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –∫–∞–∫–∏—Ö –ª–∏–±–æ –æ—à–∏–±–æ–∫
    private_list = []
    for i in global_list:
        if i[0] == chat_id:
            private_list.append(i[1])
    return private_list


def find_new_char(word: str) -> str:
    """–ü–æ–¥–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã"""
    for char in word[::-1]:
        if char in ['—å', '—ä', '—ã', '–π']:
            continue
        else:
            break
    return char


def check_last_char(new_city: str, prev_cities: list):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –∏ –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ"""
    if len(prev_cities) != 0:
        prev_city = prev_cities[-1]
        prev_city, new_city = prev_city.lower(), new_city.lower()
        if new_city[0] != find_new_char(prev_city):
            return find_new_char(prev_city).capitalize()
        else:
            return 'ok'
    else:
        return 'ok'


def create_bot_city(city: str, private_cities: list) -> list:
    """–ü–æ–¥–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞"""
    random_bot_city_list = []
    char = find_new_char(city)
    for city in cities:
        if city not in private_cities:
            if city.startswith(char):
                random_bot_city_list.append(city)
    return random_bot_city_list


def refresh(chat_id: int) -> list:
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –µ—Å–ª–∏ –±–æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–ª"""
    global global_list
    new_global_list = []
    for i in global_list:
        if i[0] != chat_id:
            new_global_list.append(i)
        global_list = new_global_list
    return global_list


@dp.message_handler(filters.Text(equals=['–ù–∞—á–∞—Ç—å –∏–≥—Ä—É \U0001F3AE']))
async def game_start(message: types.Message):
    refresh(message.chat.id)
    rnd_bt_ct = random.choice(cities)
    global_list.append([message.chat.id, rnd_bt_ct])
    await message.answer(
        f'–Ø –Ω–∞–∑—ã–≤–∞—é –≥–æ—Ä–æ–¥ <b>"{rnd_bt_ct.title()}"</b>\n–¢–µ–±–µ –Ω–∞ <b>"{find_new_char(rnd_bt_ct).capitalize()}"</b>',
        parse_mode=types.ParseMode.HTML)

    @dp.message_handler()
    async def game_continue(message: types.Message):
        user_city = message.text.strip().lower().replace('—ë', '–µ').replace('-', ' ')
        print(f'{message.from_user.username} / {message.text}')

        if user_city in cities:
            private_cities = get_private_list_by_id(message.chat.id)
            if check_last_char(user_city, private_cities) == 'ok':
                if user_city not in private_cities:
                    global_list.append([message.chat.id, user_city])
                    b = create_bot_city(user_city, private_cities)
                    if len(b) != 0:
                        bot_city = random.choice(b)
                        global_list.append([message.chat.id, bot_city])
                        await message.answer(bot_city.title())
                        list_for_print = [i for i in global_list if i[0] == message.chat.id]
                        print(f'Username: {message.from_user.username} ‚ö° / '
                              f'Chat ID: {message.chat.id} / Cities: {list_for_print}')
                    else:
                        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É. –¢—ã –≤—ã–∏–≥—Ä–∞–ª üò±")  # –í—ã–∑—ã–≤–∞–µ–º Reset
                        refresh(chat_id=message.chat.id)
                else:
                    await message.answer('–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòå')
            else:
                await message.answer(f'–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ <b>"{check_last_char(user_city, private_cities)}"</b>'
                                     , parse_mode=types.ParseMode.HTML)  # –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞ —Ç—É –±—É–∫–≤—É
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ üòï')  # –¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ .json —Ñ–∞–π–ª–µ


if __name__ == '__main__':
    json_obj = open('all_cities.json', 'r', encoding='utf-8')
    cities = [city['–ì–æ—Ä–æ–¥'].strip().lower().replace('—ë', '–µ').replace('-', ' ') for city in json.load(json_obj)]
    global_list = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã —É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç)

    executor.start_polling(dp, skip_updates=True)
