"""
                      ______   ______          ______    ____  ________  __           ____    ____   ______
                     /_  __/  / ____/         / ____/   /  _/ /_  __/\ \/ /          / __ )  / __ \ /_  __/
                      / /    / / __          / /        / /    / /    \  /          / __  | / / / /  / /
                     / /    / /_/ /         / /___    _/ /    / /     / /          / /_/ / / /_/ /  / /
                    /_/     \____/          \____/   /___/   /_/     /_/          /_____/  \____/  /_/
"""
import logging
import os
import random

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, filters
from aiogram.utils import executor
from dotenv import load_dotenv

from lexicon import lexicon_ru
from services.services import (check_last_char, cities, create_bot_city,
                               find_new_char)

load_dotenv()

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

bot_token = os.environ.get('BOT_TOKEN')
dp = Dispatcher(Bot(token=bot_token))


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫"""
    buttons = ['–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã \U0001F4D6', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É üîö', '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É \U0001F3AE']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(*buttons)
    await message.answer(lexicon_ru.GREETINGS, reply_markup=keyboard)


@dp.message_handler(filters.Text(equals='–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã \U0001F4D6'))
async def rules_button(message: types.Message):
    """–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    await message.answer(lexicon_ru.RULES, parse_mode=types.ParseMode.HTML)


@dp.message_handler(filters.Text(equals='–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É üîö'))
async def end_game_button(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    if end_game_condition(message.chat.id) is True:
        await message.answer('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É üòâ')
    else:
        await message.answer('–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üòá')


def end_game_condition(chat_id: int) -> bool:
    """–£—Å–ª–æ–≤–∏–µ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∏–≥—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π"""
    global global_list
    new_global_list = []
    if len(global_list) != 0:
        for i in global_list:
            if i[0] != chat_id:
                new_global_list.append(i)
        global_list = new_global_list
        return True
    else:
        return False


def get_private_list_by_id(chat_id: int) -> list:
    """–ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞, —á—å–∏ chat id –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ. –í—Å–µ —ç—Ç–æ
    –¥–µ–ª–∞–µ—Ç—Å—è —Ä–∞–¥–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –º–Ω–æ–≥–æ –ª—é–¥–µ–π —Å–º–æ–≥–ª–∏ –∏–≥—Ä–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –∫–∞–∫–∏—Ö –ª–∏–±–æ –æ—à–∏–±–æ–∫"""
    return [i[1] for i in global_list if i[0] == chat_id]


def refresh_bot(chat_id: int) -> list:
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –µ—Å–ª–∏ –±–æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–ª –∏–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"""
    global global_list
    new_global_list = []
    for i in global_list:
        if i[0] != chat_id:
            new_global_list.append(i)
        global_list = new_global_list
    return global_list


@dp.message_handler(filters.Text(equals=['–ù–∞—á–∞—Ç—å –∏–≥—Ä—É \U0001F3AE']))
async def game_start(message: types.Message):
    refresh_bot(message.chat.id)
    rnd_bt_ct = random.choice(cities)
    global_list.append([message.chat.id, rnd_bt_ct])
    await message.answer(
        f'–Ø –Ω–∞–∑—ã–≤–∞—é –≥–æ—Ä–æ–¥ <b>"{rnd_bt_ct.title()}"</b>\n–¢–µ–±–µ –Ω–∞ <b>"{find_new_char(rnd_bt_ct).capitalize()}"</b>',
        parse_mode=types.ParseMode.HTML)

    @dp.message_handler()
    async def game_continue(msg: types.Message):
        user_city = msg.text.strip().lower().replace('—ë', '–µ').replace('-', ' ')
        print(f'{msg.from_user.username} / {msg.text}')

        if user_city in cities:
            private_cities = get_private_list_by_id(msg.chat.id)
            if check_last_char(user_city, private_cities) is True:
                if user_city not in private_cities:
                    global_list.append([msg.chat.id, user_city])
                    random_bot_cities_list = create_bot_city(user_city, private_cities)
                    if len(random_bot_cities_list) != 0:
                        bot_city = random.choice(random_bot_cities_list)
                        global_list.append([msg.chat.id, bot_city])
                        await msg.answer(bot_city.title())
                        list_for_print = [i for i in global_list if i[0] == msg.chat.id]
                        print(f'Username: {msg.from_user.username} ‚ö° / '
                              f'Chat ID: {msg.chat.id} / Cities: {list_for_print}')
                    else:
                        await msg.answer("–Ø –Ω–µ –∑–Ω–∞—é –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É. –¢—ã –≤—ã–∏–≥—Ä–∞–ª üò±")  # –í—ã–∑—ã–≤–∞–µ–º Reset
                        refresh_bot(chat_id=msg.chat.id)
                else:
                    await msg.answer('–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòå')
            else:
                await msg.answer(f'–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ <b>"{check_last_char(user_city, private_cities)}"</b>',
                                 parse_mode=types.ParseMode.HTML)  # –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞ —Ç—É –±—É–∫–≤—É
        else:
            await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ üòï')  # –¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ .json —Ñ–∞–π–ª–µ


if __name__ == '__main__':
    global_list: list = []
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã —É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç)"""

    executor.start_polling(dp, skip_updates=True)
